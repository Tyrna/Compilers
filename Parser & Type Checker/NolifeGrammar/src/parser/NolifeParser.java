/* Generated By:JavaCC: Do not edit this line. NolifeParser.java */
package parser;
import ast.*;
import visitor.*;

public class NolifeParser implements NolifeParserConstants {

  private static ASTNodeFactory factory;

        public static void main(String args[]) {
            NolifeParser parser;
            java.io.InputStream input;

            /*if (args.length < 1) {
	      	System.out.println("Usage: java -jar nlc.jar <input file>");
	      	return;
	    }*/

            //String filename = new String(args[args.length - 1]);
            String filename = new String("test.txt");
            try {
                input = new java.io.FileInputStream(filename);
            } catch (java.io.FileNotFoundException e) {
                System.out.println("File not found.");
                return;
            }

            try {
              factory = new ASTNodeFactory();
              parser = new NolifeParser(input);
              ASTNode node = parser.program();
              //SourceVisitor v = new SourceVisitor();
              ASTBuildVisitor v = new ASTBuildVisitor();
              MemoryMapVisitor m = new MemoryMapVisitor();
              node.accept(v);
              System.out.println("\u005cn------------ Program is:\u005cn\u005cn"+v.getSrc());
              //TypeChecker u = new TypeChecker();
              //System.out.println("\n\n---------- Type checking... \n");
              //node.accept(u);
              //System.out.println("---------- Done ----------");
              System.out.println("\u005cn------------ Memory map is:\u005cn\u005cn");
              node.accept(m);
            } catch (ParseException e) {
              System.err.println("Syntax Error: "+e.getMessage());
            }
        }

  static final public ASTNode program() throws ParseException {
        ASTNode programNode = factory.makeASTNode("ProgramNode");
        ASTNode declNode = null;
        ASTNode stmtListNode = null;
        ASTNode spdNode = null;
        Token id = null;
    jj_consume_token(O_PROGRAM);
    id = jj_consume_token(O_IDENTIFIER);
    jj_consume_token(O_SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_VAR:
      declNode = decls();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_FUNCTION:
    case O_PROCEDURE:
      spdNode = subprogram_decls();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    stmtListNode = compound_stmt();
                if (declNode != null)
                        programNode.addChild(declNode);
                if (spdNode != null)
                        programNode.addChild(spdNode);
                programNode.addChild(stmtListNode);
                programNode.addLabel(id.image);
                {if (true) return programNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode decls() throws ParseException {
        ASTNode declNode = null;
    jj_consume_token(O_VAR);
    declNode = decl_list();
          {if (true) return declNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode decl_list() throws ParseException {
        ASTNode declNode = factory.makeASTNode("DeclNode");
        ASTNode varDeclsNode = null;
        ASTNode typeNode = null;
        ASTNode tempTypeNode = null;
        ASTNode tempArrayNode = null;
    label_1:
    while (true) {
      varDeclsNode = identifier_list();
      jj_consume_token(O_COLON);
      typeNode = type();
      jj_consume_token(O_SEMICOLON);
                //Might change?
                String type = typeNode.getClass().getSimpleName();

                if (!type.equals("ArrayDeclNode")) {
                        for (ASTNode varNode : varDeclsNode.getChildren()) {
                                tempTypeNode = factory.makeASTNode(type);
                                tempTypeNode.addChild(varNode);
                                declNode.addChild(tempTypeNode);
                        }
                }
                else {
                        type = typeNode.getChild(2).getClass().getSimpleName();
                        for (ASTNode varNode : varDeclsNode.getChildren()) {
                                tempTypeNode = factory.makeASTNode(type);
                                tempArrayNode = factory.makeASTNode("ArrayDeclNode");
                                tempArrayNode.addLabel(varNode.getLabel());
                                tempArrayNode.addChild(typeNode.getChild(0));
                                tempArrayNode.addChild(typeNode.getChild(1));
                                tempTypeNode.addChild(tempArrayNode);
                                declNode.addChild(tempTypeNode);
                        }
                }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
    }
          {if (true) return declNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode identifier_list() throws ParseException {
        Token id = null;
        ASTNode varDeclsNode = factory.makeASTNode("VarDeclsNode");
        ASTNode varNode = null;
    id = jj_consume_token(O_IDENTIFIER);
                varNode = factory.makeASTNode("IdDeclNode").addLabel(id.image);
                varDeclsNode.addChild(varNode);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(O_COMMA);
      id = jj_consume_token(O_IDENTIFIER);
                varNode = factory.makeASTNode("IdDeclNode").addLabel(id.image);
                varDeclsNode.addChild(varNode);
    }
          {if (true) return varDeclsNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode type() throws ParseException {
        ASTNode typeNode = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_CHARACTER:
    case O_FLOAT:
    case O_INTEGER:
      typeNode = standard_type();
      break;
    case O_ARRAY:
      typeNode = array_type();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return typeNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode standard_type() throws ParseException {
        Token id = null;
        ASTNode typeNode = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_INTEGER:
      id = jj_consume_token(O_INTEGER);
                typeNode = factory.makeASTNode("IntTypeNode");
      break;
    case O_FLOAT:
      id = jj_consume_token(O_FLOAT);
                typeNode = factory.makeASTNode("FloatTypeNode");
      break;
    case O_CHARACTER:
      id = jj_consume_token(O_CHARACTER);
                typeNode = factory.makeASTNode("CharTypeNode");
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return typeNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode array_type() throws ParseException {
        ASTNode arrayDeclNode = factory.makeASTNode("ArrayDeclNode");
        ASTNode[] dimNode = null;
        ASTNode typeNode = null;
    jj_consume_token(O_ARRAY);
    jj_consume_token(O_LBRACKET);
    dimNode = dim();
    jj_consume_token(O_RBRACKET);
    jj_consume_token(O_OF);
    typeNode = standard_type();
                arrayDeclNode.addChild(dimNode[0]);
                arrayDeclNode.addChild(dimNode[1]);
                arrayDeclNode.addChild(typeNode);
        {if (true) return arrayDeclNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode[] dim() throws ParseException {
        ASTNode[] typeNodes = { null, null };
        Token id1 = null, id2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_INT:
      id1 = jj_consume_token(O_INT);
      jj_consume_token(O_DOT);
      jj_consume_token(O_DOT);
      id2 = jj_consume_token(O_INT);
                typeNodes[0] = factory.makeASTNode("IntNode");
                typeNodes[1] = factory.makeASTNode("IntNode");
                typeNodes[0].addLabel(id1.image);
                typeNodes[1].addLabel(id2.image);
                {if (true) return typeNodes;}
      break;
    case O_CHAR:
      id1 = jj_consume_token(O_CHAR);
      jj_consume_token(O_DOT);
      jj_consume_token(O_DOT);
      id2 = jj_consume_token(O_CHAR);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                typeNodes[0] = factory.makeASTNode("CharNode");
                typeNodes[1] = factory.makeASTNode("CharNode");
                typeNodes[0].addLabel(id1.image);
                typeNodes[1].addLabel(id2.image);
                {if (true) return typeNodes;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode subprogram_decls() throws ParseException {
        ASTNode spdNode = factory.makeASTNode("SubProgDeclNode");
        ASTNode childOfSPDNode = null;
    label_3:
    while (true) {
      childOfSPDNode = subprogram_decl();
      jj_consume_token(O_SEMICOLON);
                                                             spdNode.addChild(childOfSPDNode);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_FUNCTION:
      case O_PROCEDURE:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
    }
          {if (true) return spdNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode subprogram_decl() throws ParseException {
        ASTNode funcNode = null;
        ASTNode declNode = null;
        ASTNode stmtListNode = null;
    funcNode = subprogram_head();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_VAR:
      declNode = decls();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    stmtListNode = compound_stmt();
                //If function...
                String type = funcNode.getClass().getSimpleName();
                if (!type.equals("ProcNode")) {
                        funcNode.getChild(0).addChild(declNode);
                        funcNode.getChild(0).addChild(stmtListNode);
                }
                else {
                        funcNode.addChild(declNode);
                        funcNode.addChild(stmtListNode);
                }

                {if (true) return funcNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode subprogram_head() throws ParseException {
        ASTNode funcNode = null;
        ASTNode paramNode = null;
        ASTNode returnTypeNode = null;
        Token id = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_FUNCTION:
      jj_consume_token(O_FUNCTION);
      id = jj_consume_token(O_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_LPAREN:
        paramNode = arguments();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(O_COLON);
      returnTypeNode = standard_type();
      jj_consume_token(O_SEMICOLON);
                funcNode = factory.makeASTNode("FuncNode");
                funcNode.addLabel(id.image);
                funcNode.addChild(paramNode);
                returnTypeNode.addChild(funcNode);

                {if (true) return returnTypeNode;}
      break;
    case O_PROCEDURE:
      jj_consume_token(O_PROCEDURE);
      id = jj_consume_token(O_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_LPAREN:
        paramNode = arguments();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(O_SEMICOLON);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                funcNode = factory.makeASTNode("ProcNode");
                funcNode.addLabel(id.image);
                funcNode.addChild(paramNode);

                {if (true) return funcNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode arguments() throws ParseException {
        ASTNode paramNode = null;
    jj_consume_token(O_LPAREN);
    paramNode = parameter_list();
    jj_consume_token(O_RPAREN);
    {if (true) return paramNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode parameter_list() throws ParseException {
        ASTNode paramNode = factory.makeASTNode("ParamNode");
        ASTNode typeNode = null;
        ASTNode varDeclsNode = null;
        ASTNode tempTypeNode = null;
        ASTNode tempArrayNode = null;
    varDeclsNode = identifier_list();
    jj_consume_token(O_COLON);
    typeNode = type();
                //Might change? Maybe give the list of variables to 'type()'...
                String type = typeNode.getClass().getSimpleName();

                if (!type.equals("ArrayDeclNode")) {
                        for (ASTNode varNode : varDeclsNode.getChildren()) {
                                tempTypeNode = factory.makeASTNode(type);
                                tempTypeNode.addChild(varNode);
                                paramNode.addChild(tempTypeNode);
                        }
                }
                else {
                        type = typeNode.getChild(2).getClass().getSimpleName();
                        for (ASTNode varNode : varDeclsNode.getChildren()) {
                                tempTypeNode = factory.makeASTNode(type);
                                tempArrayNode = factory.makeASTNode("ArrayDeclNode");
                                tempArrayNode.addLabel(varNode.getLabel());
                                tempArrayNode.addChild(typeNode.getChild(0));
                                tempArrayNode.addChild(typeNode.getChild(1));
                                tempTypeNode.addChild(tempArrayNode);
                                paramNode.addChild(tempTypeNode);
                        }
                }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_SEMICOLON:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      jj_consume_token(O_SEMICOLON);
      varDeclsNode = identifier_list();
      jj_consume_token(O_COLON);
      typeNode = type();
                //Might change? Maybe give the list of variables to 'type()'...
                type = typeNode.getClass().getSimpleName();
                if (!type.equals("ArrayDeclNode")) {
                        for (ASTNode varNode : varDeclsNode.getChildren()) {
                                tempTypeNode = factory.makeASTNode(type);
                                tempTypeNode.addChild(varNode);
                                paramNode.addChild(tempTypeNode);
                        }
                }
                else {
                        type = typeNode.getChild(2).getClass().getSimpleName();
                        for (ASTNode varNode : varDeclsNode.getChildren()) {
                                tempTypeNode = factory.makeASTNode(type);
                                tempArrayNode = factory.makeASTNode("ArrayDeclNode");
                                tempArrayNode.addChild(varNode);
                                tempArrayNode.addChild(typeNode.getChild(0));
                                tempArrayNode.addChild(typeNode.getChild(1));
                                tempTypeNode.addChild(tempArrayNode);
                                paramNode.addChild(tempTypeNode);
                        }
                }
    }
      {if (true) return paramNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode compound_stmt() throws ParseException {
        ASTNode stmtsNode = null;
    jj_consume_token(O_BEGIN);
    stmtsNode = stmt_list();
    jj_consume_token(O_END);
          {if (true) return stmtsNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode stmt_list() throws ParseException {
        ASTNode stmtListNode = factory.makeASTNode("StmtListNode");
        ASTNode stmtNode = null;
    stmtNode = stmt();
                            stmtListNode.addChild(stmtNode);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_SEMICOLON:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      jj_consume_token(O_SEMICOLON);
      stmtNode = stmt();
                                           stmtListNode.addChild(stmtNode);
    }
          {if (true) return stmtListNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode stmt() throws ParseException {
        ASTNode stmtNode = null;
    if (jj_2_1(2)) {
      stmtNode = assignment();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_IF:
        stmtNode = if_stmt();
        break;
      case O_WHILE:
        stmtNode = while_stmt();
        break;
      case O_IDENTIFIER:
        stmtNode = procedure_invocation();
        break;
      case O_READ:
      case O_WRITE:
        stmtNode = i_o_stmt();
        break;
      case O_BEGIN:
        stmtNode = compound_stmt();
        break;
      case O_RETURN:
        stmtNode = return_stmt();
        break;
      case O_CASE:
        stmtNode = case_stmt();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return stmtNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode assignment() throws ParseException {
  ASTNode idDefNode = null;
  ASTNode opNode = null;
  ASTNode assignNode = factory.makeASTNode("AssignNode");
    idDefNode = variable();
    jj_consume_token(O_ASSIGN);
    opNode = expr();
                assignNode.addChild(idDefNode);
                assignNode.addChild(opNode);

                {if (true) return assignNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode if_stmt() throws ParseException {
        ASTNode ifStmtNode = factory.makeASTNode("IfStmtNode");
        ASTNode ifNode = null;
        ASTNode thenNode = null;
        ASTNode elseNode = null;
    jj_consume_token(O_IF);
    ifNode = expr();
    jj_consume_token(O_THEN);
    thenNode = stmt();
    if (jj_2_2(2147483647)) {
      jj_consume_token(O_ELSE);
      elseNode = stmt();
    } else {
      ;
    }
                ifStmtNode.addChild(ifNode);
                ifStmtNode.addChild(thenNode);
                ifStmtNode.addChild(elseNode);
                {if (true) return ifStmtNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode while_stmt() throws ParseException {
        ASTNode whileNode = factory.makeASTNode("WhileNode");
        ASTNode loopNode = null;
        ASTNode doNode = null;
    jj_consume_token(O_WHILE);
    loopNode = expr();
    jj_consume_token(O_DO);
    doNode = stmt();
                whileNode.addChild(loopNode);
                whileNode.addChild(doNode);
                {if (true) return whileNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode procedure_invocation() throws ParseException {
        ASTNode procCallNode = factory.makeASTNode("ProcCallNode");
        ASTNode exprListNode = null;
        Token id = null;
    id = jj_consume_token(O_IDENTIFIER);
    jj_consume_token(O_LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_NOT:
    case O_LPAREN:
    case O_CHAR:
    case O_IDENTIFIER:
    case O_FLOATCON:
    case O_INT:
      exprListNode = expr_list();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(O_RPAREN);
                procCallNode.addChild(exprListNode);
                procCallNode.addLabel(id.image);
                {if (true) return procCallNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode i_o_stmt() throws ParseException {
        ASTNode readOrWriteNode = null;
        ASTNode givenNode = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_READ:
      jj_consume_token(O_READ);
      jj_consume_token(O_LPAREN);
      givenNode = variable();
      jj_consume_token(O_RPAREN);
                readOrWriteNode = factory.makeASTNode("ReadNode");
      break;
    case O_WRITE:
      jj_consume_token(O_WRITE);
      jj_consume_token(O_LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_NOT:
      case O_LPAREN:
      case O_CHAR:
      case O_IDENTIFIER:
      case O_FLOATCON:
      case O_INT:
        givenNode = expr();
        break;
      case O_STRING:
        givenNode = string();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(O_RPAREN);
                readOrWriteNode = factory.makeASTNode("WriteNode");
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                readOrWriteNode.addChild(givenNode);
                {if (true) return readOrWriteNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode return_stmt() throws ParseException {
        ASTNode returnNode = factory.makeASTNode("ReturnNode");
        ASTNode exprNode = null;
    jj_consume_token(O_RETURN);
    exprNode = expr();
                returnNode.addChild(exprNode);
                {if (true) return returnNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode case_stmt() throws ParseException {
        ASTNode castStmtNode = factory.makeASTNode("CaseStmtNode");
        ASTNode exprNode = null;
        ASTNode caseListNode = null;
    jj_consume_token(O_CASE);
    exprNode = expr();
    jj_consume_token(O_OF);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_FLOATCON:
    case O_INT:
      caseListNode = cases();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(O_END);
                castStmtNode.addChild(exprNode);
                castStmtNode.addChild(caseListNode);
                {if (true) return castStmtNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode cases() throws ParseException {
        ASTNode caseListNode = factory.makeASTNode("CaseListNode");
        ASTNode caseNode = null;
    caseNode = case_element();
                                    caseListNode.addChild(caseNode);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_SEMICOLON:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
      jj_consume_token(O_SEMICOLON);
      caseNode = case_element();
                                                    caseListNode.addChild(caseNode);
    }
          {if (true) return caseListNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode case_element() throws ParseException {
        ASTNode caseNode = factory.makeASTNode("CaseNode");
        ASTNode caseLabelsNode = null;
        ASTNode stmtNode = null;
    caseLabelsNode = case_labels();
    jj_consume_token(O_COLON);
    stmtNode = stmt();
                caseNode.addChild(caseLabelsNode);
                caseNode.addChild(stmtNode);
                {if (true) return caseNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode case_labels() throws ParseException {
        ASTNode caseLabelsNode = factory.makeASTNode("CaseLabelsNode");
        ASTNode symNode = null;
        Token id = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_INT:
      id = jj_consume_token(O_INT);
      break;
    case O_FLOATCON:
      id = jj_consume_token(O_FLOATCON);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                symNode = factory.makeASTNode("SymNode").addLabel(id.image);
                caseLabelsNode.addChild(symNode);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_COMMA:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_7;
      }
      jj_consume_token(O_COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_INT:
        id = jj_consume_token(O_INT);
        break;
      case O_FLOATCON:
        id = jj_consume_token(O_FLOATCON);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                symNode = factory.makeASTNode("SymNode").addLabel(id.image);
                caseLabelsNode.addChild(symNode);
    }
          {if (true) return caseLabelsNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode expr_list() throws ParseException {
        ASTNode exprListNode = factory.makeASTNode("ExprListNode");
        ASTNode opNode = null;
    opNode = expr();
                          exprListNode.addChild(opNode);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_COMMA:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_8;
      }
      jj_consume_token(O_COMMA);
      opNode = expr();
                                                                                         exprListNode.addChild(opNode);
    }
                {if (true) return exprListNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode expr() throws ParseException {
        ASTNode opNode = null;
        ASTNode termNode = null;
    termNode = term1();
    opNode = exprPrime(termNode);
          {if (true) return opNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode exprPrime(ASTNode termNode) throws ParseException {
        ASTNode opNode = termNode;
        ASTNode childOneNode = null;
        ASTNode childTwoNode = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_OR:
      jj_consume_token(O_OR);
      childOneNode = term1();
      childTwoNode = exprPrime(childOneNode);
                opNode = factory.makeASTNode("OrNode");
                opNode.addChild(termNode);
                opNode.addChild(childTwoNode);
      break;
    case O_AND:
      jj_consume_token(O_AND);
      childOneNode = term1();
      childTwoNode = exprPrime(childOneNode);
                opNode = factory.makeASTNode("AndNode");
                opNode.addChild(termNode);
                opNode.addChild(childTwoNode);
      break;
    default:
      jj_la1[24] = jj_gen;

    }
          {if (true) return opNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode term1() throws ParseException {
        ASTNode opNode = null;
        ASTNode termNode = null;
    termNode = term2();
    opNode = term1Prime(termNode);
          {if (true) return opNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode term1Prime(ASTNode termNode) throws ParseException {
        ASTNode opNode = termNode;
        ASTNode childOneNode = null;
        ASTNode childTwoNode = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_LT:
      jj_consume_token(O_LT);
      childOneNode = term2();
      childTwoNode = term1Prime(childOneNode);
                opNode = factory.makeASTNode("LessThanNode");
                opNode.addChild(termNode);
                opNode.addChild(childTwoNode);
      break;
    case O_LE:
      jj_consume_token(O_LE);
      childOneNode = term2();
      childTwoNode = term1Prime(childOneNode);
                opNode = factory.makeASTNode("LessEqualNode");
                opNode.addChild(termNode);
                opNode.addChild(childTwoNode);
      break;
    case O_GT:
      jj_consume_token(O_GT);
      childOneNode = term2();
      childTwoNode = term1Prime(childOneNode);
                opNode = factory.makeASTNode("GreaterThanNode");
                opNode.addChild(termNode);
                opNode.addChild(childTwoNode);
      break;
    case O_GE:
      jj_consume_token(O_GE);
      childOneNode = term2();
      childTwoNode = term1Prime(childOneNode);
                opNode = factory.makeASTNode("GreaterEqualNode");
                opNode.addChild(termNode);
                opNode.addChild(childTwoNode);
      break;
    case O_NE:
      jj_consume_token(O_NE);
      childOneNode = term2();
      childTwoNode = term1Prime(childOneNode);
                opNode = factory.makeASTNode("NotEqualNode");
                opNode.addChild(termNode);
                opNode.addChild(childTwoNode);
      break;
    case O_EQ:
      jj_consume_token(O_EQ);
      childOneNode = term2();
      childTwoNode = term1Prime(childOneNode);
                opNode = factory.makeASTNode("EqualNode");
                opNode.addChild(termNode);
                opNode.addChild(childTwoNode);
      break;
    default:
      jj_la1[25] = jj_gen;

    }
          {if (true) return opNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode term2() throws ParseException {
        ASTNode opNode = null;
        ASTNode termNode = null;
    termNode = term3();
    opNode = term2Prime(termNode);
          {if (true) return opNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode term2Prime(ASTNode termNode) throws ParseException {
        ASTNode opNode = termNode;
        ASTNode childOneNode = null;
        ASTNode childTwoNode = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_PLUS:
      jj_consume_token(O_PLUS);
      childOneNode = term3();
      childTwoNode = term2Prime(childOneNode);
                opNode = factory.makeASTNode("AddNode");
                opNode.addChild(termNode);
                opNode.addChild(childTwoNode);
      break;
    case O_MINUS:
      jj_consume_token(O_MINUS);
      childOneNode = term3();
      childTwoNode = term2Prime(childOneNode);
                opNode = factory.makeASTNode("SubNode");
                opNode.addChild(termNode);
                opNode.addChild(childTwoNode);
      break;
    default:
      jj_la1[26] = jj_gen;

    }
          {if (true) return opNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode term3() throws ParseException {
        ASTNode opNode = null;
        ASTNode factorNode = null;
    factorNode = factor();
    opNode = term3Prime(factorNode);
          {if (true) return opNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode term3Prime(ASTNode factorNode) throws ParseException {
        ASTNode opNode = factorNode;
        ASTNode childOneNode = null;
        ASTNode childTwoNode = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_TIMES:
      jj_consume_token(O_TIMES);
      childOneNode = factor();
      childTwoNode = term3Prime(childOneNode);
                opNode = factory.makeASTNode("MulNode");
                opNode.addChild(factorNode);
                opNode.addChild(childTwoNode);
      break;
    case O_MOD:
      jj_consume_token(O_MOD);
      childOneNode = factor();
      childTwoNode = term3Prime(childOneNode);
                opNode = factory.makeASTNode("ModNode");
                opNode.addChild(factorNode);
                opNode.addChild(childTwoNode);
      break;
    default:
      jj_la1[27] = jj_gen;

    }
          {if (true) return opNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode factor() throws ParseException {
        ASTNode factorNode = null;
        ASTNode exprListNode = null;
        Token id = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_IDENTIFIER:
      id = jj_consume_token(O_IDENTIFIER);
                              factorNode = factory.makeASTNode("IdRefNode").addLabel(id.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_LBRACKET:
      case O_LPAREN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case O_LBRACKET:
          jj_consume_token(O_LBRACKET);
          exprListNode = expr();
          jj_consume_token(O_RBRACKET);
                        factorNode = factory.makeASTNode("ArrayRefNode").addLabel(id.image);
                        factorNode.addChild(exprListNode);
          break;
        case O_LPAREN:
          jj_consume_token(O_LPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case O_NOT:
          case O_LPAREN:
          case O_CHAR:
          case O_IDENTIFIER:
          case O_FLOATCON:
          case O_INT:
            exprListNode = expr_list();
            break;
          default:
            jj_la1[28] = jj_gen;
            ;
          }
          jj_consume_token(O_RPAREN);
                        factorNode = factory.makeASTNode("CallNode").addLabel(id.image);
                        factorNode.addChild(exprListNode);
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      break;
    case O_INT:
      id = jj_consume_token(O_INT);
                         factorNode = factory.makeASTNode("IntNode").addLabel(id.image);
      break;
    case O_FLOATCON:
      id = jj_consume_token(O_FLOATCON);
                              factorNode = factory.makeASTNode("FloatNode").addLabel(id.image);
      break;
    case O_CHAR:
      id = jj_consume_token(O_CHAR);
                          factorNode = factory.makeASTNode("CharNode").addLabel(id.image);
      break;
    case O_LPAREN:
      jj_consume_token(O_LPAREN);
      factorNode = expr();
      jj_consume_token(O_RPAREN);
                factorNode = factory.makeASTNode("ParenNode").addChild(factorNode);
      break;
    case O_NOT:
      jj_consume_token(O_NOT);
      factorNode = factor();
                factorNode = factory.makeASTNode("NotNode").addChild(factorNode);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return factorNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode variable() throws ParseException {
        ASTNode defNode = null;
        ASTNode exprNode = null;
        Token id = null;
    id = jj_consume_token(O_IDENTIFIER);
                defNode = factory.makeASTNode("IdDefNode");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_LBRACKET:
      jj_consume_token(O_LBRACKET);
      exprNode = expr();
      jj_consume_token(O_RBRACKET);
                defNode = factory.makeASTNode("ArrayDefNode");
                defNode.addChild(exprNode);
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
                defNode.addLabel(id.image);
                {if (true) return defNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode string() throws ParseException {
        ASTNode stringNode = factory.makeASTNode("StringNode");
        Token id = null;
    id = jj_consume_token(O_STRING);
                stringNode.addLabel(id.image);
                {if (true) return stringNode;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_9() {
    if (jj_3R_10()) return true;
    if (jj_scan_token(O_ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(O_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(O_ELSE)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(O_LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public NolifeParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000000,0x208000,0x0,0x0,0x24500,0x24400,0x0,0x208000,0x4000000,0x0,0x0,0x208000,0x0,0x0,0x39810200,0x40000,0x40000,0x10800000,0x0,0x0,0x0,0x0,0x0,0x0,0x100080,0xc0000000,0x0,0x40,0x40000,0x0,0x0,0x40000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x100000,0x80,0x0,0x0,0x810000,0x0,0x0,0x400,0x400,0x0,0x40,0x40,0x100000,0xd10400,0xd30400,0x0,0xc00000,0x40,0xc00000,0x80,0xc00000,0x80,0x0,0xf,0x6000,0x8000,0xd10400,0x500,0x500,0xd10400,0x100,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public NolifeParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public NolifeParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new NolifeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public NolifeParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new NolifeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public NolifeParser(NolifeParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(NolifeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 33; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
